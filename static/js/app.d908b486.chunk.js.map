{"version":3,"sources":["src/serviceWorkerRegistration.js","App.js","assets/images/background-image.png"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","PlaceholderImage","require","App","View","style","styles","container","imageContainer","Text","text","Image","source","image","StatusBar","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","fontSize","fontWeight","fontStyle","color","marginVertical","width","height","borderRadius","module","exports"],"mappings":"+KAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAuCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,YC5F3DC,EAAmBC,EAAQ,IAElB,SAASC,IACtB,OACE,eAACC,EAAA,QAAI,CAACC,MAAOC,EAAOC,UAAU,UAC5B,eAACH,EAAA,QAAI,CAACC,MAAOC,EAAOE,eAAe,UACjC,cAACC,EAAA,QAAI,CAACJ,MAAOC,EAAOI,KAAK,uBACzB,cAACC,EAAA,QAAK,CAACC,OAAQX,EAAkBI,MAAOC,EAAOO,WAEjD,cAACC,EAAA,UAAS,CAACT,MAAM,aDQhB,SAAkBtB,GAEvB,GAAuB,kBAAmBC,UAAW,CAGnD,GADkB,IAAI+B,IAAIC,cAAwBvC,OAAOC,SAASuC,MACpDC,SAAWzC,OAAOC,SAASwC,OAIvC,OAGFzC,OAAO0C,iBAAiB,QAAQ,WAC9B,IAAMrC,EAAWkC,gCAEbzC,IAgEV,SAAiCO,EAAOC,GAEtCqC,MAAMtC,EAAO,CACXuC,QAAS,CAAE,iBAAkB,YAE5BlC,MAAK,SAACmC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1C,UAAUC,cAAc0C,MAAMxC,MAAK,SAACC,GAClCA,EAAawC,aAAazC,MAAK,WAC7BV,OAAOC,SAASmD,eAKpBhD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAkC,CAAwBhD,EAAOC,GAI/BC,UAAUC,cAAc0C,MAAMxC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OC7B/BgD,GAEA,IAAMzB,EAAS0B,UAAWC,OAAO,CAC/B1B,UAAW,CACT2B,KAAM,EACNC,gBAAiB,UACjBC,WAAY,UAEd5B,eAAgB,CACd0B,KAAM,EACNG,WAAY,IAEd3B,KAAM,CACJ4B,SAAU,GACVC,WAAY,OACZC,UAAW,SACXC,MAAO,OACPC,eAAgB,IAElB7B,MAAO,CACL8B,MAAO,IACPC,OAAQ,IACRC,aAAc,O,uDC5ClBC,EAAOC,QAAU,IAA0B,+C","file":"static/js/app.d908b486.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  const isEnvProduction = process.env.NODE_ENV === \"production\";\r\n  if (isEnvProduction && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View, Image } from \"react-native\";\n\nimport * as serviceWorkerRegistration from \"./src/serviceWorkerRegistration\";\n\nconst PlaceholderImage = require(\"./assets/images/background-image.png\");\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <Text style={styles.text}>Hi there!</Text>\n        <Image source={PlaceholderImage} style={styles.image} />\n      </View>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#25292e\",\n    alignItems: \"center\",\n  },\n  imageContainer: {\n    flex: 1,\n    paddingTop: 58,\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    fontStyle: \"italic\",\n    color: \"#fff\",\n    marginVertical: 20,\n  },\n  image: {\n    width: 320,\n    height: 440,\n    borderRadius: 18,\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/background-image.979cd865.png\";"],"sourceRoot":""}